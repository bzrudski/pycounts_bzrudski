name: ci-cd
on: [push, pull_request]

jobs:
  ci:
    # Set up operating system
    runs-on: ubuntu-latest

    # Define job steps
    steps:
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
            python-version: 3.9

      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Install package
        run: poetry install

      - name: Test with pytest
        run: poetry run pytest tests/ --cov=pycounts_bzrudski --cov-report=xml

      - name: Use Codecov to track coverage
        uses: codecov/codecov-action@v3
        with:
            files: ./coverage.xml # Coverage report

      - name: Get existing documentation
        uses: actions/cache/restore@v4
        id: cache-docs-restore
        with:
          key: ${{ runner.os }}-docs
          path: _build.tar.gz

      - name: Unzip cache
        if: steps.cache-docs-restore.outputs.cache-hit == 'true'
        run: |
          mkdir docs/_build
          tar -xvf _build.tar.gz -C docs/_build
          rm _build.tar.gz

      - name: Build documentation
        run: poetry run make html --directory docs/

      - name: Create new cache
        run: tar -czvf _build.tar.gz docs/_build

      - name: Upload new cache
        uses: actions/cache/save@v4
        id: cache-docs-save
        with:
          path: _build.tar.gz
          key: ${{ runner.os }}-docs

  cd:
    permissions:
      id-token: write
      contents: write

    # Only run this job if the "ci" job passes
    needs: ci

    # Only run this job if new work is pushed to the "main" branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # Set up operating system
    runs-on: ubuntu-latest

    # Define job steps
    steps:
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
            python-version: 3.9

      - name: Check-out repository
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Install package
        run: poetry install

      - name: Use Python Semantic Release to prepare release
        id: release
        uses: python-semantic-release/python-semantic-release@v8.3.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.release.outputs.released == 'true'
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

      - name: Test install from TestPyPI
        run: |
            pip install \
            --index-url https://test.pypi.org/simple/ \
            --extra-index-url https://pypi.org/simple \
            pycounts_bzrudski

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.release.outputs.released == 'true'
        with:
            password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish package distributions to GitHub Releases
        uses: python-semantic-release/publish-action@v9.19.1
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
